// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use clap::Parser;
use k256::{
    ecdsa::{signature::Signer, Signature, SigningKey},
    EncodedPoint,
};
use methods::{ECDSA_ELF, ECDSA_ID};
use rand_core::OsRng;
use risc0_zkvm::{default_executor, default_prover, ExecutorEnv};
use serde_json::to_string_pretty;
use std::{fs::File, io::Write, process::exit, time::Instant};
#[derive(serde::Serialize)]
struct BenchResults {
    task: String,
    execution_time: f64,
    prover_time: f64,
    verifier_time: f64,
    proof_size: u64,
    num_cycles: u64,
    speed: f64,
}

#[derive(Parser)]
#[command(name = "task")]
#[command(about = "task to bench", long_about = None)]
struct Args {
    #[arg(short, long)]
    task: String,

    #[arg(short, long)] // default: False
    prove_only: bool,
}
fn main() {
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();
    let args = Args::parse();

    let signing_key = SigningKey::random(&mut OsRng); // Serialize with `::to_bytes()`
    let message = vec![0; 1024];
    let signature: Signature = signing_key.sign(&message[..]);
    let input = (
        signing_key.verifying_key().to_encoded_point(true),
        message,
        signature,
    );
    let env_exec = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();
    let env_prove = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // execution
    let mut execution_time = 0.0;
    if !args.prove_only {
        let exec = default_executor();
        let start = Instant::now();
        let _session = exec.execute(env_exec, ECDSA_ELF).unwrap();
        execution_time = start.elapsed().as_secs_f64();
        println!("program execution: ✅");
    }
    // proving.
    let prover = default_prover();
    let start = Instant::now();
    let prove_info = prover.prove(env_prove, ECDSA_ELF).unwrap();
    let prover_time = start.elapsed().as_secs_f64();
    let num_cycles = prove_info.stats.total_cycles;
    let speed = num_cycles as f64 / prover_time;
    println!("proof generation: ✅");
    if args.prove_only {
        exit(0);
    }
    // extract the receipt.
    let receipt = prove_info.receipt;
    // from https://github.com/succinctlabs/zkvm-perf/blob/main/eval/src/risc0.rs
    let composite_receipt = receipt.inner.composite().unwrap();
    let num_segments = composite_receipt.segments.len();

    // Get the core proof size by summing across all segments.
    let mut proof_size = 0 as u64;
    for segment in composite_receipt.segments.iter() {
        proof_size += segment.seal.len() as u64 * 4;
    }
    let _output: Vec<Vec<Vec<i32>>> = receipt.journal.decode().unwrap();
    let start = Instant::now();
    receipt.verify(ECDSA_ID).unwrap();
    let verifier_time = start.elapsed().as_secs_f64();
    println!("proof verification: ✅");
    let (receipt_verifying_key, _receipt_message): (EncodedPoint, Vec<u8>) =
        receipt.journal.decode().unwrap();

    println!(
        "Verified the signature over message with key {}",
        receipt_verifying_key
    );

    let results = BenchResults {
        task: args.task.clone(),
        execution_time,
        prover_time,
        verifier_time,
        proof_size,
        num_cycles,
        speed,
    };

    let json = to_string_pretty(&results).unwrap();
    let mut file = File::create(args.task.to_owned() + ".json").unwrap();
    file.write_all(json.as_bytes()).unwrap()
}
